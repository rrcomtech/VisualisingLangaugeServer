/*
 * generated by Xtext 2.16.0
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.xtext.example.mydsl.myDsl.Model
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.mydsl.myDsl.DecisionRecord

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyDslGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		
		val model = resource.contents.head as Model;
		val decisionRecord = model.records.head as DecisionRecord;
		val fileName = resource.URI.trimFileExtension.lastSegment

		fsa.generateFile(fileName + ".java", '''
			public class «fileName» {
			    
			    public static void main(String[] args) {

			    }
			    
			}
		''')

		fsa.generateFile(fileName + ".md", '''
			# «model.records.head.title» 
			    
			**User story:** «decisionRecord.userStory»
			
			«decisionRecord.summary»

			## Considered Alterantives
			
			«FOR alt : decisionRecord.consideredAlteratives.alternatives»
				* «alt.name»
				
			«ENDFOR»
			
		''')
		
//		«FOR c : model.types.filter[!members.filter(Operation).empty]»
//					
//					«generateImpl(c)»
//				«ENDFOR»

	}
}
